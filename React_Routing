Understanding React Routing

Introduction: What is Routing?
Imagine you are visiting a city and want to get from one place to another—like from a park to a museum. You need directions to move between locations. 
In a React app, routing is like those directions. It helps users move smoothly between different parts of the app.
Routing makes your app feel like a website with multiple pages, even though it's technically just one page.

Why is Routing Important?
Routing is important because it makes your app easy to use and lets users move between different sections. I
magine a website where you can only see the homepage, and there is no way to go to other pages—it would be confusing and not very useful.
With routing, users can explore different parts of your app, like moving from the homepage to an About page, a Contact page, or even specific user profiles.

React Router is the most common library for adding routing to React. It is popular because it is easy to use,
has lots of community support, and makes navigation smooth.

What is React Router?
React Router is a library that helps you add navigation to your React app. It gives you tools to define routes, link to different pages, 
and show the right components based on the URL. Think of React Router as a traffic controller—it helps decide which path to take and 
shows the right content for each route, making your app organized and easy to use. It also improves SEO by creating clean URLs,
which makes your app easier for search engines to find.

Setting Up React Router
To use React Router, you need to add it to your project. Follow these steps to set up routing in a React app:

1. Install React Router:
First, install React Router using npm or yarn:

npm install react-router-dom


2. Import BrowserRouter:
In your index.js or main entry file, wrap your app in BrowserRouter so that routing works throughout your app:

import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter } from 'react-router-dom';
import App from './App';

ReactDOM.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>,
  document.getElementById('root')
);

3. Define Routes:
In your main application file (App.js), you can define routes. Import Route from react-router-dom to create multiple routes:

import React from 'react';
import { Route } from 'react-router-dom';
import Home from './components/Home';
import About from './components/About';
import Contact from './components/Contact';

function App() {
  return (
    <div>
      <>
        <Route exact path="/" component={Home} />
        <Route path="/about" component={About} />
        <Route path="/contact" component={Contact} />
      </>
    </div>
  );
}

export default App;
In this example:

Route defines the paths (/, /about, /contact) and which components to display for each path.

The exact keyword ensures the root (/) path only matches exactly when the URL is /.

4. Add Links for Navigation:
To let users move between different pages, use the Link component. For example, add navigation links in your app:

import React from 'react';
import { Link } from 'react-router-dom';

function Navbar() {
  return (
    <nav>
      <ul>
        <li><Link to="/">Home</Link></li>
        <li><Link to="/about">About</Link></li>
        <li><Link to="/contact">Contact</Link></li>
      </ul>
    </nav>
  );
}
export default Navbar;

How React Router Works
React Router lets your app handle different URLs and show the right components without reloading the entire page. 
This makes your app faster and gives users a smooth experience by only updating the parts of the page that need to change.
