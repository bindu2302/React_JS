What is Redux?
Redux is a JavaScript library used to manage state in your app. It acts as a central storage room where all your pp's data is kept, making it easy 
for different parts of your app to access and update data without passing it around through props.


üéØ Why Use Redux?
When an app gets large, passing data between components becomes difficult.
Redux solves this by providing a single source of truth (the store).
It makes state predictable and easier to manage, especially in complex apps.


‚öôÔ∏è How Redux Works ‚Äì Basic Flow
Store: Holds the global state.
Action: Describes what happened (plain JS object).
Reducer: A function that updates the state based on the action.
Dispatch: Sends the action to the reducer.
View: React components access the state using useSelector and update it using dispatch.

Component ‚Üí Dispatch Action ‚Üí Reducer ‚Üí Updates Store ‚Üí View Re-renders


üõ†Ô∏è Steps to Set Up Redux in a React App
1. Install Redux & React-Redux
npm install redux react-redux

2. Create a Redux Store

// store.js
import { createStore } from 'redux';
import reducer from './reducer';

const store = createStore(reducer);
export default store;


3. Create Reducer

// reducer.js
const initialState = {
  count: 0,
};

function counterReducer(state = initialState, action) {
  switch (action.type) {
    case 'INCREMENT':
      return { ...state, count: state.count + 1 };
    case 'DECREMENT':
      return { ...state, count: state.count - 1 };
    default:
      return state;
  }
}
export default counterReducer;

4. Provide Store to React App

// index.js
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import store from './store';
import App from './App';

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);


5. Use Redux in Components


// Counter.js
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';

function Counter() {
  const count = useSelector((state) => state.count);
  const dispatch = useDispatch();

  return (
    <div>
      <h1>Count: {count}</h1>
      <button onClick={() => dispatch({ type: 'INCREMENT' })}>+</button>
      <button onClick={() => dispatch({ type: 'DECREMENT' })}>-</button>
    </div>
  );
}

export default Counter;


| Concept        | Description                                      |
| -------------- | ------------------------------------------------ |
| **Store**      | Holds the state of the application               |
| **Action**     | Plain object that describes what happened        |
| **Reducer**    | A function that determines how the state changes |
| **Dispatch**   | Sends the action to the reducer                  |
| **Selector**   | Reads data from the Redux store                  |
| **Middleware** | Add-ons like redux-thunk for async operations    |


‚úÖ Pros of Redux
Centralized state management
Predictable state changes
Debugging tools (Redux DevTools)
Time-travel debugging
Scalable for large applications
Works with any UI layer (React, Angular, etc.)

‚ùå Cons of Redux
Too much boilerplate for small apps
Learning curve for beginners
Can be overkill for simple state needs
Requires understanding of multiple concepts (actions, reducers, middleware)

Redux is a powerful tool for managing global state in React apps. It's best used when your app becomes too complex to manage state with props or useState.
While it can seem like overkill for small projects, it's invaluable for medium to large apps.



